name: "[internal] Create and Publish Release Docker Image"

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string
      is_major_version:
        required: true
        type: boolean
        default: false
      timeout:
        required: false
        type: number
        default: 10
jobs:
  create-docker-release-image:
    strategy:
      matrix:
        os: [ubuntu-20.04]
        arch: [grayskull, wormhole_b0]
    runs-on:
      - build-docker
      - in-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Download wheels
        uses: actions/download-artifact@v4
        with:
          name: eager-dist-${{ matrix.os }}-any
      - name: Get the name of the wheel and set up env variables
        id: generate-tag-name
        run: |
          echo "WHEEL_FILENAME=$(ls -1 *.whl)" >> $GITHUB_ENV
          REPO_IMAGE_NAME=ghcr.io/${{ github.repository }}/tt-metalium-${{ matrix.os }}-amd64-release/${{ matrix.arch }}
          echo "REPO_IMAGE_NAME=$REPO_IMAGE_NAME" >> $GITHUB_ENV
          TAG_NAME=$REPO_IMAGE_NAME:${{ inputs.version }}
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          build-args: |
            WHEEL_FILENAME=${{ env.WHEEL_FILENAME }}
            BASE_IMAGE_NAME=tt-metalium/${{ matrix.os }}-amd64
          tags: ${{ env.TAG_NAME }}
          context: .
          file: dockerfile/release.Dockerfile
  smoke-test-docker-image:
    needs: create-docker-release-image
    strategy:
      matrix:
        os: [ubuntu-20.04]
        test_group:
          [
              {
                arch: grayskull,
                runs-on: ["cloud-virtual-machine", "E150", "in-service"],
                cmd: pytest tests/end_to_end_tests,
              },
              {
                arch: wormhole_b0,
                runs-on: ["cloud-virtual-machine", "N150", "in-service"],
                cmd: pytest tests/end_to_end_tests,
              },
              {
                arch: wormhole_b0,
                runs-on: ["cloud-virtual-machine", "N300", "in-service"],
                cmd: pytest tests/end_to_end_tests,
              },
          ]
    env:
      ARCH_NAME: ${{ matrix.test_group.arch }}
      LOGURU_LEVEL: INFO
    runs-on: ${{ matrix.test_group.runs-on }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Run smoke test on the image
        timeout-minutes: ${{ inputs.timeout }}
        uses: ./.github/actions/docker-run
        with:
          docker_os_arch: tt-metalium-${{ matrix.os }}-amd64-release/${{ matrix.test_group.arch }}
          docker_version: ${{ inputs.version }}
          docker_password: ${{ secrets.GITHUB_TOKEN }}
          run_args: |
            ${{ matrix.test_group.cmd }}
  tag-docker-image-as-latest:
    needs: [smoke-test-docker-image, create-docker-release-image]
    strategy:
      matrix:
        os: [ubuntu-20.04]
        arch: [grayskull, wormhole_b0]
    runs-on:
      - build-docker
      - in-service
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Docker login
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag latest if this is a major version release
        run: |
          set -eu # basic shell hygiene
          LATEST_TAG=latest
          if [ "${{  inputs.is_major_version }}" = "true" ]; then
            LATEST_TAG=latest
          else
            LATEST_TAG=latest-rc
          fi
          echo "Determined that the current tag is " $LATEST_TAG
          REPO_IMAGE_NAME=ghcr.io/${{ github.repository }}/tt-metalium-${{ matrix.os }}-amd64-release/${{ matrix.arch }}
          TAG_NAME=$REPO_IMAGE_NAME:${{ inputs.version }}
          docker pull $TAG_NAME
          echo "Tagging the image as " $REPO_IMAGE_NAME:$LATEST_TAG
          docker tag $TAG_NAME $REPO_IMAGE_NAME:$LATEST_TAG
          echo "Pushing image with tag " $REPO_IMAGE_NAME:$LATEST_TAG
          docker push $REPO_IMAGE_NAME:$LATEST_TAG
