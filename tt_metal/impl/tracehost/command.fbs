// Define schema for tracing host API calls, called Commands in this context.
include "tracehost/types.fbs";

namespace tt.tt_metal.flatbuffer;

table ReplayTraceCommand {
    // TODO (kmabee) - add device.
    cq_id: int;
    tid: int;
    blocking: bool;
}

table EnqueueTraceCommand {
    // TODO (kmabee) - add device.
    cq_id: int;
    tid: int;
    blocking: bool;
}

table LoadTraceCommand {
    tid: int; // Pointer to trace data.
    cq_id: int;
}

table ReleaseTraceCommand {
    // TODO (kmabee) - add device.
    tid: int; // Pointer to trace data.
}

table CreateBufferCommand {
    global_id: uint32;
    config: InterleavedBufferConfig; // Later grow to union for Sharded.
    address: uint32; // Optional for pre-allocated buffers.
}

table DeallocateBufferCommand {
    global_id: uint32;   // Reference to Buffer to be deallocated
}

table EnqueueWriteBufferCommand {
    cq_global_id: uint32;       // reference to CommandQueue
    buffer_global_id: uint32;   // Reference to Buffer used as destination
    src: [uint32];              // Data to be written. Support only some types for now.
    blocking: bool;
}

table EnqueueReadBufferCommand {
    cq_global_id: uint32;       // reference to CommandQueue
    buffer_global_id: uint32;   // Reference to Buffer used as source
    // dst unsure what to do here.
    blocking: bool;
}

table FinishCommand {
    cq_global_id: uint32;       // reference to CommandQueue
    sub_device_ids: [ubyte];    // array of uint8 values representing SubDeviceId::Id
}

table CreateProgramCommand {
    global_id: uint32;
}

table EnqueueProgramCommand {
    cq_global_id: uint32;       // reference to CommandQueue
    program_global_id: uint32;  // Reference to Program
    blocking: bool;
}

table CreateKernelCommand {
    global_id: uint32;          // Reference to Kernel
    program_global_id: uint32;  // Reference to Program
    file_name: string;          // Later replace with src, then binary
    core_spec: CoreSpec;
    config: KernelConfig;
}

table SetRuntimeArgsUint32Command {
    program_global_id: uint32;  // Reference to Program
    kernel_global_id: uint32;   // Reference to Kernel
    core_spec: CoreSpec;
    args: [uint32];             // Arguments to be passed to kernel
}

table SetRuntimeArgsCommand {
    kernel_global_id: uint32;   // Reference to Kernel
    core_spec: CoreSpec;
    args: [RuntimeArg];         // Arguments to be passed to kernel
}

table CreateCircularBufferCommand {
    global_id: uint32;          // Reference to CBHandle
    program_global_id: uint32;  // Reference to Program
    core_spec: CoreSpec;
    config: CircularBufferConfig;
}

union CommandType {
    ReplayTraceCommand,
    EnqueueTraceCommand,
    LoadTraceCommand,
    ReleaseTraceCommand,
    CreateBufferCommand,
    DeallocateBufferCommand,
    EnqueueWriteBufferCommand,
    EnqueueReadBufferCommand,
    FinishCommand,
    CreateProgramCommand,
    EnqueueProgramCommand,
    CreateKernelCommand,
    SetRuntimeArgsUint32Command,
    SetRuntimeArgsCommand,
    CreateCircularBufferCommand,
}

table Command {
    cmd: CommandType;
}
